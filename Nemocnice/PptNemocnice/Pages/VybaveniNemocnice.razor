@page "/vybaveni"

<PageTitle>Vybaveni nemocnice</PageTitle>

<h3>Vybaveni Nemocnice:</h3>

<table class="table">
        <thead>
            <tr>
                <th>Nazev</th>
                <th>Datum nákupu</th>
                <th>Datum poslední revize</th>
                <th>Ptřebuje revizi?</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (seznam.Count != 0)
            {
                @foreach (var pomocna in seznam)
                {
                  <VybaveniRow Item=pomocna DeleteItemCallback="() => seznam.Remove(pomocna)" />
                }
            } else {<tr>Nic zde není</tr>}
        </tbody>
 </table>


@code {

    List <VybaveniModel> seznam = new List<VybaveniModel>();

    protected override void OnInitialized()
    {
        Generovat();
    }

    void Generovat()
    {

        for (int i = 0; i < 10; i++)
        {
            //nazev
            Random random = new Random();

            const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            string nazev = new string(Enumerable.Repeat(chars, 5).Select(s => s[random.Next(s.Length)]).ToArray());

            //datum nakupu

            DateTime start_nakup = new DateTime(2005, 1, 1);
            int range_nakup = (DateTime.Today - start_nakup).Days;           
            DateTime nakup = start_nakup.AddDays(random.Next(range_nakup));

            //datum revize
            DateTime start_revize = new DateTime(2018, 1, 1);
            int range_revize = (DateTime.Today - start_revize).Days;           
            DateTime revize = start_revize.AddDays(random.Next(range_revize));

            VybaveniModel vyb = new VybaveniModel(nazev, nakup, revize, false);
            seznam.Add(vyb);
        }

    }

}
