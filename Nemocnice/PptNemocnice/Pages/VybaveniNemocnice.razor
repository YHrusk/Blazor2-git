@page "/vybaveni"
@inject HttpClient Http

<PageTitle>Vybaveni nemocnice</PageTitle>

<h3>Vybaveni Nemocnice:</h3>

@if (seznam == null)
{
    <div class="absolute right-1/2 bottom-1/2  transform translate-x-1/2 translate-y-1/2 ">
        <div class=" border-t-transparent border-solid animate-spin  rounded-full border-teal-600 border-8 h-16 w-16"></div>
    </div>
    return;
}

@if (!isInNewMode)
{
    <button @onclick="@(() => {isInNewMode = true; newEntity = new(){IsInEditMode = true, Name="new"};})" class="twbtn bg-blue-500 my-2">Přidej nový záznam</button>
}

<table class="w-full">
    <thead>
        <tr>
            <th>Název</th>
            <th>Datum nákupu</th>
            <th>Datum poslední revize</th>
            <th>Potřebuje revizi?</th>
            <th>Cena</th>
            <th></th>
            <th></th>
        </tr>
    </thead>

    <tbody>
        @if (isInNewMode && newEntity != null)
        {
            <VybaveniRow EditDoneCallback="async (success) => {if(success) await AddEntity(newEntity); isInNewMode = false;}" Item=newEntity>
                <tr>
                    <button class="twbtn bg-blue-500">Přidej</button>
                    <button type="button" @onclick="() => isInNewMode = false" class="twbtn bg-yellow-500">Zrušit</button>
                </tr>
            </VybaveniRow>
        }

        @if (seznam.Count != 0)
        {
            @foreach (var item in seznam)
            {
                <VybaveniRow EditDoneCallback="async (success) => {if(success) await UpdateEntity(item);}" Item=item DeleteItemCallback="() => DeleteVybaveni(item)" />
            }
        }
        else
        {
            <tr>Nic zde není</tr>
        }
    </tbody>
</table>


@code {
    bool isInNewMode;                                           //boolean jestli chci nový záznam

    VybaveniModel? newEntity;

    List<VybaveniModel>? seznam;

    protected override async Task OnInitializedAsync()
    {
        seznam = await Http.GetFromJsonAsync<List<VybaveniModel>>("vybaveni");
    }

    async Task DeleteVybaveni(VybaveniModel item)
    {
        var resp = await Http.DeleteAsync($"vybaveni/{item.Id}");

        if(resp.IsSuccessStatusCode) seznam?.Remove(item);                                    //kdyz je null tak se hodi return
    }

    async Task AddEntity(VybaveniModel item)   /*post*/
    {
        var resp = await Http.PostAsJsonAsync("vybaveni", item);

        if (resp.IsSuccessStatusCode)
        {
            item.Id = await resp.Content.ReadFromJsonAsync<Guid>();
            seznam?.Insert(0, item);
        }
    }

    async Task UpdateEntity(VybaveniModel item)     /*put*/
    {
        var resp = await Http.PutAsJsonAsync("vybaveni", item);

        //if (resp.IsSuccessStatusCode) seznam?.Add(item);
    }

    //void Generovat()
    //{

    //    for (int i = 0; i < 10; i++)
    //    {
    //        Random random = new Random();

    //        //nazev
    //        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    //        string nazev = new string(Enumerable.Repeat(chars, 5).Select(s => s[random.Next(s.Length)]).ToArray());

    //        //datum nakupu

    //        DateTime start_nakup = new DateTime(2005, 1, 1);
    //        int range_nakup = (DateTime.Today - start_nakup).Days;
    //        DateTime nakup = start_nakup.AddDays(random.Next(range_nakup));

    //        //datum revize
    //        DateTime start_revize = new DateTime(2018, 1, 1);
    //        int range_revize = (DateTime.Today - start_revize).Days;
    //        DateTime revize = start_revize.AddDays(random.Next(range_revize));

    //        int cena = random.Next(500, 1000000);

    //        VybaveniModel vyb = new VybaveniModel(nazev, nakup, revize, false, cena);
    //        seznam.Add(vyb);
    //    }

    //}

}
