@*<h3>VybaveniRow</h3>*@

@if (Item == null) return;

@if (Item != null && !Item.IsInEditMode)            @*vypsani seznamu*@
{
    <tr class="@(Item.NeedRevision?"bg-red-300":"")">
        <td>@Item.Name</td>
        <td>@Item.BoughtDate.ToShortDateString()</td>
        <td>@Item.LastRevisionDate.ToShortDateString()</td>
        <td>@(Item.NeedRevision?"Ano":"Ne")</td>
        <td>@Item.Price</td>
        <td class="flex gap-1">
            <button @onclick="@(() => DeleteItemCallback.InvokeAsync())" class="twbtn bg-red-400">Smazat</button>              @*smazani*@
            <button @onclick="() => Item.LastRevisionDate = DateTime.Now" style="background-color:blue">Provést revizi</button>             @*revize*@
            <button @onclick="() => TurnOnEdit()" class="twbtn bg-amber-300">✏️</button>         @*edit*@
        </td>
    </tr>
}
else if (editingItem != null && editingItem.IsInEditMode)
{
    <tr class="border-2 border-slate-400">
        <td colspan="5">
            <EditForm Model=editingItem OnValidSubmit="() => TurnOffEdit(true)">                       @*kontrola validace*@
                <DataAnnotationsValidator />
                @*<ValidationSummary />*@
                <table class="table">
                    <tbody>
                        <tr>
                            <td>
                                <InputText @bind-Value=editingItem.Name />
                                <ValidationMessage For=" () => editingItem.Name"></ValidationMessage>
                            </td>
                            <td><InputDate @bind-Value=editingItem.BoughtDate /></td>
                            <td><InputDate @bind-Value=editingItem.LastRevisionDate /></td>
                            <td>@(editingItem.NeedRevision?"Ano":"Ne")</td>
                            <td>
                                <InputNumber type="number" @bind-Value=editingItem.Price />
                                <ValidationMessage For=" () => editingItem.Price"></ValidationMessage>
                            </td>

                            <td class="flex gap-1">
                                @if (ChildContent == null)
                                {
                                    <button class=" twbtn bg-yellow-300">Ok</button>
                                    <button type="button" @onclick="()=> TurnOffEdit(false)" class="twbtn bg-danger">Zrušit</button>
                                }
                                else
                                {
                                    @ChildContent
                                }
                            </td>
                        </tr>
                    </tbody>
                </table>
            </EditForm>
        </td>
    </tr>
}

@code {
    [Parameter] public EventCallback DeleteItemCallback { get; set; }

    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public EventCallback<bool> EditDoneCallback { get; set; }

    VybaveniModel? _Item;

    VybaveniModel? editingItem;

    [Parameter]
    public VybaveniModel? Item
    {
        get => _Item;
        set
        {
            _Item = value;
            if (value != null && value.IsInEditMode)
                TurnOnEdit();
        }
    }

    private void TurnOnEdit()
    {
        if (Item != null)
        {
            Item.IsInEditMode = true;
            editingItem = Item.Copy();
        }
    }

    private void TurnOffEdit(bool success)
    {
        if (success)
        {
            editingItem?.MapTo(Item);
        }
        if (Item is not null)
            Item.IsInEditMode = false;
        editingItem = null;
        EditDoneCallback.InvokeAsync(success);
    }

}
